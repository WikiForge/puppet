map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}

server {
	listen 80 deferred;
	listen [::]:80 deferred;

	server_name ~.;

	location ~ ^/check$ {
                proxy_pass http://127.0.0.1:81;
		proxy_http_version 1.1;
		proxy_set_header Connection close;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_buffering    off;
		proxy_read_timeout 60s;
		proxy_send_timeout 60s;
		send_timeout       60s;
	}

	if ($http_user_agent ~ "MJ12bot") {
		return 403;
	}

	location / {
                if ($request_uri !~ "^/check$") {
			return 301 https://$host$request_uri;
		}
	}
}

server {
	# We can only set backlog once per port (so this will be applied to the others below)
	listen 443 ssl http2 deferred backlog=16384;
	listen [::]:443 ssl http2 deferred backlog=16384;

	server_name wikiforge.net *.wikiforge.net;
	root /var/www/html;

	ssl_certificate /etc/ssl/localcerts/wildcard.wikiforge.net.crt;
	ssl_certificate_key /etc/ssl/private/wildcard.wikiforge.net.key;

	ssl_stapling_verify on;

	if ($http_user_agent ~ "MJ12bot") {
		return 403;
	}

	location / {
		proxy_pass http://127.0.0.1:81;
		proxy_http_version 1.1;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_read_timeout 140s;
		proxy_send_timeout 140s;
		send_timeout       140s;
		proxy_buffer_size       32k;
		proxy_buffers         4 32k;
		# Remove duplicate headers that is already added on the frontend
		proxy_hide_header     X-XSS-Protection;
		proxy_hide_header     X-Frame-Options;
		proxy_buffering    off;
	}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name m.wikiforge.net *.m.wikiforge.net;

	root /var/www/html;

	ssl_certificate /etc/ssl/localcerts/m.wikiforge.net.crt;
	ssl_certificate_key /etc/ssl/private/m.wikiforge.net.key;

	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

	if ($http_user_agent ~ "MJ12bot") {
		return 403;
	}

	if ($host ~ ^(\w+)\.m\.wikiforge\.net$) {
		return 301 https://$1.wikiforge.net$request_uri;
	}

	return 301 https://wikiforge.net$request_uri;
}

<%- @sslredirects.each_pair do | name, property | -%>
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	<%- if property['additional_domain'] -%>
	server_name <%= property['url'] %> <%= property['additional_domain'] %>;
	<%- else -%>
	server_name <%= property['url'] %>;
	<%- end -%>

	root /var/www/html;

	if ($http_user_agent ~ "MJ12bot") {
		return 403;
	}

	ssl_certificate /etc/ssl/localcerts/<%= property['sslname'] %>.crt;
	ssl_certificate_key /etc/ssl/private/<%= property['sslname'] %>.key;

	<%- if property['hsts'] == "strict" -%>
	add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload";
	<%- else -%>
	add_header Strict-Transport-Security "max-age=604800";
	<%- end -%>

	<%- if property['path_redirects'] -%>
	<%- property['path_redirects'].each_pair do | path, redirect | -%>
	location ~* <%= path %>$ {
		return 301 https://<%= redirect %>;
	}
	<%- end -%>
	# If we are using path_redirects, make the main
	# redirect property optional.
	<%- if property['redirect'] -%>
	# Only redirect if there are no other matches found.
	# This prevents this from conflicting with
	# redirects specified in path_redirects.
	location / {
		return 301 https://<%= property['redirect'] %>$request_uri;
	}
	<%- end -%>
	<%- else -%>
	# If we aren't using path_redirects, always
	# redirect using the main redirect property.
	return 301 https://<%= property['redirect'] %>$request_uri;
	<%- end -%>
}

<%- end -%>

<%- @sslcerts.each_pair do | name, property | -%>
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
<%- if property['additional_domain'] -%>
	server_name <%= property['url'] %> <%= property['additional_domain'] %>;
<%- else -%>
	server_name <%= property['url'] %>;
<%- end -%>
	root /var/www/html;
<%- if property['sslname'] -%>
	ssl_certificate /etc/ssl/localcerts/<%= property['sslname'] %>.crt;
	ssl_certificate_key /etc/ssl/private/<%= property['sslname'] %>.key;
<%- else -%>
	ssl_certificate /etc/ssl/localcerts/<%= property['url'] %>.crt;
	ssl_certificate_key /etc/ssl/private/<%= property['url'] %>.key;
<%- end -%>

	<% if property['hsts'] == "strict" %>
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
	<% else %>
	add_header Strict-Transport-Security "max-age=604800";
	<% end %>

	# Default headers
	add_header X-Served-By '<%= @facts['networking']['fqdn'] %>';

	# XSS Protection
	add_header x-xss-protection "1; mode=block" always;

	add_header X-Frame-Options "ALLOW-FROM static.wikiforge.net";

	if ($http_user_agent ~ "MJ12bot") {
		return 403;
	}

	location / {
		proxy_pass http://127.0.0.1:81;
		proxy_http_version 1.1;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_read_timeout 140s;
		proxy_send_timeout 140s;
		send_timeout       140s;
		proxy_buffer_size       32k;
		proxy_buffers         4 32k;
		# Remove duplicate headers that is already added on the frontend
		proxy_hide_header     X-XSS-Protection;
		proxy_hide_header     X-Frame-Options;
		proxy_buffering    off;
	}
}

<%- end -%>
